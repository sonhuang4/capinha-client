<?php

namespace App\Http\Controllers;

use App\Models\CardRequest;
use App\Models\Card;
use Illuminate\Http\Request;
use Inertia\Inertia;
use Illuminate\Support\Str;

class CardRequestController extends Controller
{
    /**
     * Display a listing of card requests
     */
    public function index()
    {
        $requests = CardRequest::select([
            'id', 'name', 'job_title', 'company', 'email', 'phone', 'whatsapp', 
            'status', 'created_at', 'processed_at', 'processed_by'
        ])
        ->with('processedBy:id,name')
        // REMOVED: ->with('card:id,request_id,code,unique_slug,status') 
        ->orderByDesc('created_at')
        ->get()
        ->map(function ($request) {
            return [
                'id' => $request->id,
                'name' => $request->name,
                'job_title' => $request->job_title,
                'company' => $request->company,
                'email' => $request->email,
                'phone' => $request->phone,
                'whatsapp' => $request->whatsapp,
                'status' => $request->status,
                'display_name' => $request->display_name,
                'primary_contact' => $request->primary_contact,
                'created_at' => $request->created_at->format('d/m/Y H:i'),
                'processed_at' => $request->processed_at?->format('d/m/Y H:i'),
                'processed_by' => $request->processedBy?->name,
                'is_complete' => $request->isComplete(),
                'card' => null, // Simplified - no card relationship for now
            ];
        });

        return Inertia::render('AdminRequests', [
            'requests' => $requests
        ]);
    }

    /**
     * Store a new card request from public form
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            // Basic Information
            'name' => 'required|string|max:255',
            'job_title' => 'nullable|string|max:255',
            'company' => 'nullable|string|max:255',
            'bio' => 'nullable|string|max:500',
            
            // Contact Information
            'email' => 'nullable|email|max:255',
            'phone' => 'nullable|string|max:20',
            'whatsapp' => 'nullable|string|max:20',
            'website' => 'nullable|url|max:255',
            'location' => 'nullable|string|max:255',
            
            // Social Media
            'instagram' => 'nullable|string|max:255',
            'linkedin' => 'nullable|string|max:255',
            'twitter' => 'nullable|string|max:255',
            'facebook' => 'nullable|string|max:255',
            
            // Visual Elements
            'profile_picture' => 'nullable|url|max:500',
            'logo' => 'nullable|url|max:500',
            'color_theme' => 'nullable|in:blue,green,purple,pink,orange,dark',
            
            // System Fields
            'activation_code' => 'nullable|string|max:50',
        ]);

        // Set default color theme if not provided
        if (empty($validated['color_theme'])) {
            $validated['color_theme'] = 'blue';
        }

        $cardRequest = CardRequest::create($validated);

        return redirect()->route('request.thanks')->with('success', 'Solicitação enviada com sucesso!');
    }

    /**
     * Show a specific card request
     */
    public function show($id)
    {
        $request = CardRequest::with('processedBy')->findOrFail($id);
        // REMOVED: ->with('card', 'processedBy')

        return Inertia::render('AdminRequestDetails', [
            'request' => [
                'id' => $request->id,
                'name' => $request->name,
                'job_title' => $request->job_title,
                'company' => $request->company,
                'bio' => $request->bio,
                'email' => $request->email,
                'phone' => $request->phone,
                'whatsapp' => $request->whatsapp,
                'website' => $request->website,
                'location' => $request->location,
                'instagram' => $request->instagram,
                'linkedin' => $request->linkedin,
                'twitter' => $request->twitter,
                'facebook' => $request->facebook,
                'profile_picture' => $request->profile_picture,
                'logo' => $request->logo,
                'color_theme' => $request->color_theme,
                'status' => $request->status,
                'activation_code' => $request->activation_code,
                'created_at' => $request->created_at->format('d/m/Y H:i'),
                'processed_at' => $request->processed_at?->format('d/m/Y H:i'),
                'processed_by' => $request->processedBy?->name,
                'card' => null, // Simplified - no card relationship
            ]
        ]);
    }

    /**
     * Convert a request to a card
     */
    public function convertToCard($id)
    {
        $request = CardRequest::findOrFail($id);

        if ($request->status === 'processed') {
            return redirect()->back()->with('error', 'Esta solicitação já foi processada.');
        }

        try {
            // Create the card from request data
            $card = Card::create([
                // REMOVED: 'request_id' => $request->id, // Skip this for now
                'code' => Str::random(6),
                'unique_slug' => $this->generateUniqueSlug(),
                'name' => $request->name,
                'job_title' => $request->job_title,
                'company' => $request->company,
                'bio' => $request->bio,
                'email' => $request->email,
                'phone' => $request->phone,
                'whatsapp' => $request->whatsapp,
                'website' => $request->website,
                'location' => $request->location,
                'instagram' => $request->instagram,
                'linkedin' => $request->linkedin,
                'twitter' => $request->twitter,
                'facebook' => $request->facebook,
                'profile_picture' => $request->profile_picture,
                'logo' => $request->logo,
                'color_theme' => $request->color_theme,
                'status' => 'activated',
                'click_count' => 0,
            ]);

            // Mark request as processed
            $request->markAsProcessed();

            return redirect()->route('dashboard')->with('success', 
                'Cartão criado com sucesso! ID: ' . $card->id . ' | Código: ' . $card->code
            );

        } catch (\Exception $e) {
            \Log::error('Failed to convert request to card: ' . $e->getMessage());
            return redirect()->back()->with('error', 'Erro ao criar cartão. Tente novamente.');
        }
    }

    /**
     * Update request notes
     */
    public function updateNotes(Request $request, $id)
    {
        $validated = $request->validate([
            'notes' => 'nullable|string|max:1000'
        ]);

        $cardRequest = CardRequest::findOrFail($id);
        $cardRequest->update($validated);

        return redirect()->back()->with('success', 'Notas atualizadas com sucesso!');
    }

    /**
     * Delete a request
     */
    public function destroy($id)
    {
        $request = CardRequest::findOrFail($id);
        
        // Simplified check - no card relationship needed
        if ($request->status === 'processed') {
            return redirect()->back()->with('error', 'Não é possível deletar uma solicitação que já foi processada.');
        }

        $request->delete();

        return redirect()->back()->with('success', 'Solicitação deletada com sucesso!');
    }

    /**
     * Generate unique slug for card
     */
    private function generateUniqueSlug(): string
    {
        do {
            $slug = strtoupper(Str::random(6));
        } while (Card::where('unique_slug', $slug)->exists());

        return $slug;
    }

    /**
     * Bulk actions for multiple requests
     */
    public function bulkAction(Request $request)
    {
        $validated = $request->validate([
            'action' => 'required|in:activate,email,export,delete',
            'request_ids' => 'required|array',
            'request_ids.*' => 'exists:card_requests,id'
        ]);

        $requests = CardRequest::whereIn('id', $validated['request_ids'])->get();

        switch ($validated['action']) {
            case 'activate':
                return $this->bulkActivate($requests);
            
            case 'email':
                return $this->bulkEmail($requests);
            
            case 'export':
                return $this->bulkExport($requests);
            
            case 'delete':
                return $this->bulkDelete($requests);
        }
    }

    /**
     * Bulk activate requests
     */
    private function bulkActivate($requests)
    {
        $successCount = 0;
        $errors = [];

        foreach ($requests as $request) {
            if ($request->status === 'processed') {
                $errors[] = "Solicitação #{$request->id} já foi processada";
                continue;
            }

            try {
                $card = Card::create([
                    // REMOVED: 'request_id' => $request->id, // Skip for now
                    'code' => Str::random(6),
                    'unique_slug' => $this->generateUniqueSlug(),
                    'name' => $request->name,
                    'job_title' => $request->job_title,
                    'company' => $request->company,
                    'bio' => $request->bio,
                    'email' => $request->email,
                    'phone' => $request->phone,
                    'whatsapp' => $request->whatsapp,
                    'website' => $request->website,
                    'location' => $request->location,
                    'instagram' => $request->instagram,
                    'linkedin' => $request->linkedin,
                    'twitter' => $request->twitter,
                    'facebook' => $request->facebook,
                    'profile_picture' => $request->profile_picture,
                    'logo' => $request->logo,
                    'color_theme' => $request->color_theme,
                    'status' => 'activated',
                    'click_count' => 0,
                ]);

                $request->markAsProcessed();
                $successCount++;

                // Send activation email here if needed
                // Mail::to($request->email)->send(new CardActivationMail($card));

            } catch (\Exception $e) {
                $errors[] = "Erro ao processar solicitação #{$request->id}: " . $e->getMessage();
            }
        }

        $message = "{$successCount} cartões criados com sucesso.";
        if (!empty($errors)) {
            $message .= " Erros: " . implode(', ', $errors);
        }

        return redirect()->back()->with('success', $message);
    }

    /**
     * Bulk email functionality
     */
    private function bulkEmail($requests)
    {
        // Implement bulk email logic
        foreach ($requests as $request) {
            // Send appropriate email based on status
            // Mail::to($request->email)->send(new BulkNotificationMail($request));
        }

        return redirect()->back()->with('success', 'Emails enviados com sucesso!');
    }

    /**
     * Export requests to CSV
     */
    private function bulkExport($requests)
    {
        $filename = 'card_requests_' . now()->format('Y-m-d_H-i-s') . '.csv';
        
        $headers = [
            'Content-Type' => 'text/csv',
            'Content-Disposition' => "attachment; filename=\"{$filename}\"",
        ];

        $callback = function() use ($requests) {
            $file = fopen('php://output', 'w');
            
            // CSV headers
            fputcsv($file, [
                'ID', 'Nome', 'Email', 'Telefone', 'WhatsApp', 'Empresa', 
                'Cargo', 'Status', 'Data Criação', 'Data Processamento'
            ]);

            foreach ($requests as $request) {
                fputcsv($file, [
                    $request->id,
                    $request->name,
                    $request->email,
                    $request->phone,
                    $request->whatsapp,
                    $request->company,
                    $request->job_title,
                    $request->status,
                    $request->created_at->format('d/m/Y H:i'),
                    $request->processed_at?->format('d/m/Y H:i'),
                ]);
            }

            fclose($file);
        };

        return response()->stream($callback, 200, $headers);
    }

    /**
     * Bulk delete requests
     */
    private function bulkDelete($requests)
    {
        $deleteCount = 0;
        $errors = [];

        foreach ($requests as $request) {
            // Simplified - no card relationship check
            if ($request->status === 'processed') {
                $errors[] = "Solicitação #{$request->id} não pode ser deletada (já processada)";
                continue;
            }

            $request->delete();
            $deleteCount++;
        }

        $message = "{$deleteCount} solicitações deletadas com sucesso.";
        if (!empty($errors)) {
            $message .= " Erros: " . implode(', ', $errors);
        }

        return redirect()->back()->with('success', $message);
    }
}